/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WelcomeRouteImport } from './routes/welcome'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as OrganizationRouteImport } from './routes/$organization'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrganizationIndexRouteImport } from './routes/$organization/index'
import { Route as OrganizationUsersIndexRouteImport } from './routes/$organization/users/index'
import { Route as OrganizationTaxonomiesIndexRouteImport } from './routes/$organization/taxonomies/index'
import { Route as OrganizationTagsIndexRouteImport } from './routes/$organization/tags/index'
import { Route as OrganizationReactionPacksIndexRouteImport } from './routes/$organization/reaction-packs/index'
import { Route as OrganizationPostsIndexRouteImport } from './routes/$organization/posts/index'
import { Route as OrganizationOrganizationsIndexRouteImport } from './routes/$organization/organizations/index'
import { Route as OrganizationMetaSchemasIndexRouteImport } from './routes/$organization/meta-schemas/index'
import { Route as OrganizationFilesIndexRouteImport } from './routes/$organization/files/index'

const WelcomeRoute = WelcomeRouteImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationRoute = OrganizationRouteImport.update({
  id: '/$organization',
  path: '/$organization',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationIndexRoute = OrganizationIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrganizationRoute,
} as any)
const OrganizationUsersIndexRoute = OrganizationUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => OrganizationRoute,
} as any)
const OrganizationTaxonomiesIndexRoute =
  OrganizationTaxonomiesIndexRouteImport.update({
    id: '/taxonomies/',
    path: '/taxonomies/',
    getParentRoute: () => OrganizationRoute,
  } as any)
const OrganizationTagsIndexRoute = OrganizationTagsIndexRouteImport.update({
  id: '/tags/',
  path: '/tags/',
  getParentRoute: () => OrganizationRoute,
} as any)
const OrganizationReactionPacksIndexRoute =
  OrganizationReactionPacksIndexRouteImport.update({
    id: '/reaction-packs/',
    path: '/reaction-packs/',
    getParentRoute: () => OrganizationRoute,
  } as any)
const OrganizationPostsIndexRoute = OrganizationPostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => OrganizationRoute,
} as any)
const OrganizationOrganizationsIndexRoute =
  OrganizationOrganizationsIndexRouteImport.update({
    id: '/organizations/',
    path: '/organizations/',
    getParentRoute: () => OrganizationRoute,
  } as any)
const OrganizationMetaSchemasIndexRoute =
  OrganizationMetaSchemasIndexRouteImport.update({
    id: '/meta-schemas/',
    path: '/meta-schemas/',
    getParentRoute: () => OrganizationRoute,
  } as any)
const OrganizationFilesIndexRoute = OrganizationFilesIndexRouteImport.update({
  id: '/files/',
  path: '/files/',
  getParentRoute: () => OrganizationRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$organization': typeof OrganizationRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/welcome': typeof WelcomeRoute
  '/$organization/': typeof OrganizationIndexRoute
  '/$organization/files': typeof OrganizationFilesIndexRoute
  '/$organization/meta-schemas': typeof OrganizationMetaSchemasIndexRoute
  '/$organization/organizations': typeof OrganizationOrganizationsIndexRoute
  '/$organization/posts': typeof OrganizationPostsIndexRoute
  '/$organization/reaction-packs': typeof OrganizationReactionPacksIndexRoute
  '/$organization/tags': typeof OrganizationTagsIndexRoute
  '/$organization/taxonomies': typeof OrganizationTaxonomiesIndexRoute
  '/$organization/users': typeof OrganizationUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/welcome': typeof WelcomeRoute
  '/$organization': typeof OrganizationIndexRoute
  '/$organization/files': typeof OrganizationFilesIndexRoute
  '/$organization/meta-schemas': typeof OrganizationMetaSchemasIndexRoute
  '/$organization/organizations': typeof OrganizationOrganizationsIndexRoute
  '/$organization/posts': typeof OrganizationPostsIndexRoute
  '/$organization/reaction-packs': typeof OrganizationReactionPacksIndexRoute
  '/$organization/tags': typeof OrganizationTagsIndexRoute
  '/$organization/taxonomies': typeof OrganizationTaxonomiesIndexRoute
  '/$organization/users': typeof OrganizationUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$organization': typeof OrganizationRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/welcome': typeof WelcomeRoute
  '/$organization/': typeof OrganizationIndexRoute
  '/$organization/files/': typeof OrganizationFilesIndexRoute
  '/$organization/meta-schemas/': typeof OrganizationMetaSchemasIndexRoute
  '/$organization/organizations/': typeof OrganizationOrganizationsIndexRoute
  '/$organization/posts/': typeof OrganizationPostsIndexRoute
  '/$organization/reaction-packs/': typeof OrganizationReactionPacksIndexRoute
  '/$organization/tags/': typeof OrganizationTagsIndexRoute
  '/$organization/taxonomies/': typeof OrganizationTaxonomiesIndexRoute
  '/$organization/users/': typeof OrganizationUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$organization'
    | '/sign-in'
    | '/welcome'
    | '/$organization/'
    | '/$organization/files'
    | '/$organization/meta-schemas'
    | '/$organization/organizations'
    | '/$organization/posts'
    | '/$organization/reaction-packs'
    | '/$organization/tags'
    | '/$organization/taxonomies'
    | '/$organization/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/welcome'
    | '/$organization'
    | '/$organization/files'
    | '/$organization/meta-schemas'
    | '/$organization/organizations'
    | '/$organization/posts'
    | '/$organization/reaction-packs'
    | '/$organization/tags'
    | '/$organization/taxonomies'
    | '/$organization/users'
  id:
    | '__root__'
    | '/'
    | '/$organization'
    | '/sign-in'
    | '/welcome'
    | '/$organization/'
    | '/$organization/files/'
    | '/$organization/meta-schemas/'
    | '/$organization/organizations/'
    | '/$organization/posts/'
    | '/$organization/reaction-packs/'
    | '/$organization/tags/'
    | '/$organization/taxonomies/'
    | '/$organization/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrganizationRoute: typeof OrganizationRouteWithChildren
  SignInRoute: typeof SignInRoute
  WelcomeRoute: typeof WelcomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$organization': {
      id: '/$organization'
      path: '/$organization'
      fullPath: '/$organization'
      preLoaderRoute: typeof OrganizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$organization/': {
      id: '/$organization/'
      path: '/'
      fullPath: '/$organization/'
      preLoaderRoute: typeof OrganizationIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/users/': {
      id: '/$organization/users/'
      path: '/users'
      fullPath: '/$organization/users'
      preLoaderRoute: typeof OrganizationUsersIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/taxonomies/': {
      id: '/$organization/taxonomies/'
      path: '/taxonomies'
      fullPath: '/$organization/taxonomies'
      preLoaderRoute: typeof OrganizationTaxonomiesIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/tags/': {
      id: '/$organization/tags/'
      path: '/tags'
      fullPath: '/$organization/tags'
      preLoaderRoute: typeof OrganizationTagsIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/reaction-packs/': {
      id: '/$organization/reaction-packs/'
      path: '/reaction-packs'
      fullPath: '/$organization/reaction-packs'
      preLoaderRoute: typeof OrganizationReactionPacksIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/posts/': {
      id: '/$organization/posts/'
      path: '/posts'
      fullPath: '/$organization/posts'
      preLoaderRoute: typeof OrganizationPostsIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/organizations/': {
      id: '/$organization/organizations/'
      path: '/organizations'
      fullPath: '/$organization/organizations'
      preLoaderRoute: typeof OrganizationOrganizationsIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/meta-schemas/': {
      id: '/$organization/meta-schemas/'
      path: '/meta-schemas'
      fullPath: '/$organization/meta-schemas'
      preLoaderRoute: typeof OrganizationMetaSchemasIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
    '/$organization/files/': {
      id: '/$organization/files/'
      path: '/files'
      fullPath: '/$organization/files'
      preLoaderRoute: typeof OrganizationFilesIndexRouteImport
      parentRoute: typeof OrganizationRoute
    }
  }
}

interface OrganizationRouteChildren {
  OrganizationIndexRoute: typeof OrganizationIndexRoute
  OrganizationFilesIndexRoute: typeof OrganizationFilesIndexRoute
  OrganizationMetaSchemasIndexRoute: typeof OrganizationMetaSchemasIndexRoute
  OrganizationOrganizationsIndexRoute: typeof OrganizationOrganizationsIndexRoute
  OrganizationPostsIndexRoute: typeof OrganizationPostsIndexRoute
  OrganizationReactionPacksIndexRoute: typeof OrganizationReactionPacksIndexRoute
  OrganizationTagsIndexRoute: typeof OrganizationTagsIndexRoute
  OrganizationTaxonomiesIndexRoute: typeof OrganizationTaxonomiesIndexRoute
  OrganizationUsersIndexRoute: typeof OrganizationUsersIndexRoute
}

const OrganizationRouteChildren: OrganizationRouteChildren = {
  OrganizationIndexRoute: OrganizationIndexRoute,
  OrganizationFilesIndexRoute: OrganizationFilesIndexRoute,
  OrganizationMetaSchemasIndexRoute: OrganizationMetaSchemasIndexRoute,
  OrganizationOrganizationsIndexRoute: OrganizationOrganizationsIndexRoute,
  OrganizationPostsIndexRoute: OrganizationPostsIndexRoute,
  OrganizationReactionPacksIndexRoute: OrganizationReactionPacksIndexRoute,
  OrganizationTagsIndexRoute: OrganizationTagsIndexRoute,
  OrganizationTaxonomiesIndexRoute: OrganizationTaxonomiesIndexRoute,
  OrganizationUsersIndexRoute: OrganizationUsersIndexRoute,
}

const OrganizationRouteWithChildren = OrganizationRoute._addFileChildren(
  OrganizationRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrganizationRoute: OrganizationRouteWithChildren,
  SignInRoute: SignInRoute,
  WelcomeRoute: WelcomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
