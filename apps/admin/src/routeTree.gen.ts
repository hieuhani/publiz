/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WelcomeImport } from './routes/welcome'
import { Route as SignInImport } from './routes/sign-in'
import { Route as OrganizationImport } from './routes/$organization'
import { Route as IndexImport } from './routes/index'
import { Route as OrganizationIndexImport } from './routes/$organization/index'
import { Route as OrganizationUsersIndexImport } from './routes/$organization/users/index'
import { Route as OrganizationTaxonomiesIndexImport } from './routes/$organization/taxonomies/index'
import { Route as OrganizationTagsIndexImport } from './routes/$organization/tags/index'
import { Route as OrganizationReactionPacksIndexImport } from './routes/$organization/reaction-packs/index'
import { Route as OrganizationPostsIndexImport } from './routes/$organization/posts/index'
import { Route as OrganizationOrganizationsIndexImport } from './routes/$organization/organizations/index'
import { Route as OrganizationMetaSchemasIndexImport } from './routes/$organization/meta-schemas/index'
import { Route as OrganizationFilesIndexImport } from './routes/$organization/files/index'

// Create/Update Routes

const WelcomeRoute = WelcomeImport.update({
  path: '/welcome',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationRoute = OrganizationImport.update({
  path: '/$organization',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationIndexRoute = OrganizationIndexImport.update({
  path: '/',
  getParentRoute: () => OrganizationRoute,
} as any)

const OrganizationUsersIndexRoute = OrganizationUsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => OrganizationRoute,
} as any)

const OrganizationTaxonomiesIndexRoute =
  OrganizationTaxonomiesIndexImport.update({
    path: '/taxonomies/',
    getParentRoute: () => OrganizationRoute,
  } as any)

const OrganizationTagsIndexRoute = OrganizationTagsIndexImport.update({
  path: '/tags/',
  getParentRoute: () => OrganizationRoute,
} as any)

const OrganizationReactionPacksIndexRoute =
  OrganizationReactionPacksIndexImport.update({
    path: '/reaction-packs/',
    getParentRoute: () => OrganizationRoute,
  } as any)

const OrganizationPostsIndexRoute = OrganizationPostsIndexImport.update({
  path: '/posts/',
  getParentRoute: () => OrganizationRoute,
} as any)

const OrganizationOrganizationsIndexRoute =
  OrganizationOrganizationsIndexImport.update({
    path: '/organizations/',
    getParentRoute: () => OrganizationRoute,
  } as any)

const OrganizationMetaSchemasIndexRoute =
  OrganizationMetaSchemasIndexImport.update({
    path: '/meta-schemas/',
    getParentRoute: () => OrganizationRoute,
  } as any)

const OrganizationFilesIndexRoute = OrganizationFilesIndexImport.update({
  path: '/files/',
  getParentRoute: () => OrganizationRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$organization': {
      id: '/$organization'
      path: '/$organization'
      fullPath: '/$organization'
      preLoaderRoute: typeof OrganizationImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeImport
      parentRoute: typeof rootRoute
    }
    '/$organization/': {
      id: '/$organization/'
      path: '/'
      fullPath: '/$organization/'
      preLoaderRoute: typeof OrganizationIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/files/': {
      id: '/$organization/files/'
      path: '/files'
      fullPath: '/$organization/files'
      preLoaderRoute: typeof OrganizationFilesIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/meta-schemas/': {
      id: '/$organization/meta-schemas/'
      path: '/meta-schemas'
      fullPath: '/$organization/meta-schemas'
      preLoaderRoute: typeof OrganizationMetaSchemasIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/organizations/': {
      id: '/$organization/organizations/'
      path: '/organizations'
      fullPath: '/$organization/organizations'
      preLoaderRoute: typeof OrganizationOrganizationsIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/posts/': {
      id: '/$organization/posts/'
      path: '/posts'
      fullPath: '/$organization/posts'
      preLoaderRoute: typeof OrganizationPostsIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/reaction-packs/': {
      id: '/$organization/reaction-packs/'
      path: '/reaction-packs'
      fullPath: '/$organization/reaction-packs'
      preLoaderRoute: typeof OrganizationReactionPacksIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/tags/': {
      id: '/$organization/tags/'
      path: '/tags'
      fullPath: '/$organization/tags'
      preLoaderRoute: typeof OrganizationTagsIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/taxonomies/': {
      id: '/$organization/taxonomies/'
      path: '/taxonomies'
      fullPath: '/$organization/taxonomies'
      preLoaderRoute: typeof OrganizationTaxonomiesIndexImport
      parentRoute: typeof OrganizationImport
    }
    '/$organization/users/': {
      id: '/$organization/users/'
      path: '/users'
      fullPath: '/$organization/users'
      preLoaderRoute: typeof OrganizationUsersIndexImport
      parentRoute: typeof OrganizationImport
    }
  }
}

// Create and export the route tree

interface OrganizationRouteChildren {
  OrganizationIndexRoute: typeof OrganizationIndexRoute
  OrganizationFilesIndexRoute: typeof OrganizationFilesIndexRoute
  OrganizationMetaSchemasIndexRoute: typeof OrganizationMetaSchemasIndexRoute
  OrganizationOrganizationsIndexRoute: typeof OrganizationOrganizationsIndexRoute
  OrganizationPostsIndexRoute: typeof OrganizationPostsIndexRoute
  OrganizationReactionPacksIndexRoute: typeof OrganizationReactionPacksIndexRoute
  OrganizationTagsIndexRoute: typeof OrganizationTagsIndexRoute
  OrganizationTaxonomiesIndexRoute: typeof OrganizationTaxonomiesIndexRoute
  OrganizationUsersIndexRoute: typeof OrganizationUsersIndexRoute
}

const OrganizationRouteChildren: OrganizationRouteChildren = {
  OrganizationIndexRoute: OrganizationIndexRoute,
  OrganizationFilesIndexRoute: OrganizationFilesIndexRoute,
  OrganizationMetaSchemasIndexRoute: OrganizationMetaSchemasIndexRoute,
  OrganizationOrganizationsIndexRoute: OrganizationOrganizationsIndexRoute,
  OrganizationPostsIndexRoute: OrganizationPostsIndexRoute,
  OrganizationReactionPacksIndexRoute: OrganizationReactionPacksIndexRoute,
  OrganizationTagsIndexRoute: OrganizationTagsIndexRoute,
  OrganizationTaxonomiesIndexRoute: OrganizationTaxonomiesIndexRoute,
  OrganizationUsersIndexRoute: OrganizationUsersIndexRoute,
}

const OrganizationRouteWithChildren = OrganizationRoute._addFileChildren(
  OrganizationRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$organization': typeof OrganizationRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/welcome': typeof WelcomeRoute
  '/$organization/': typeof OrganizationIndexRoute
  '/$organization/files': typeof OrganizationFilesIndexRoute
  '/$organization/meta-schemas': typeof OrganizationMetaSchemasIndexRoute
  '/$organization/organizations': typeof OrganizationOrganizationsIndexRoute
  '/$organization/posts': typeof OrganizationPostsIndexRoute
  '/$organization/reaction-packs': typeof OrganizationReactionPacksIndexRoute
  '/$organization/tags': typeof OrganizationTagsIndexRoute
  '/$organization/taxonomies': typeof OrganizationTaxonomiesIndexRoute
  '/$organization/users': typeof OrganizationUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/welcome': typeof WelcomeRoute
  '/$organization': typeof OrganizationIndexRoute
  '/$organization/files': typeof OrganizationFilesIndexRoute
  '/$organization/meta-schemas': typeof OrganizationMetaSchemasIndexRoute
  '/$organization/organizations': typeof OrganizationOrganizationsIndexRoute
  '/$organization/posts': typeof OrganizationPostsIndexRoute
  '/$organization/reaction-packs': typeof OrganizationReactionPacksIndexRoute
  '/$organization/tags': typeof OrganizationTagsIndexRoute
  '/$organization/taxonomies': typeof OrganizationTaxonomiesIndexRoute
  '/$organization/users': typeof OrganizationUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$organization': typeof OrganizationRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/welcome': typeof WelcomeRoute
  '/$organization/': typeof OrganizationIndexRoute
  '/$organization/files/': typeof OrganizationFilesIndexRoute
  '/$organization/meta-schemas/': typeof OrganizationMetaSchemasIndexRoute
  '/$organization/organizations/': typeof OrganizationOrganizationsIndexRoute
  '/$organization/posts/': typeof OrganizationPostsIndexRoute
  '/$organization/reaction-packs/': typeof OrganizationReactionPacksIndexRoute
  '/$organization/tags/': typeof OrganizationTagsIndexRoute
  '/$organization/taxonomies/': typeof OrganizationTaxonomiesIndexRoute
  '/$organization/users/': typeof OrganizationUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$organization'
    | '/sign-in'
    | '/welcome'
    | '/$organization/'
    | '/$organization/files'
    | '/$organization/meta-schemas'
    | '/$organization/organizations'
    | '/$organization/posts'
    | '/$organization/reaction-packs'
    | '/$organization/tags'
    | '/$organization/taxonomies'
    | '/$organization/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/welcome'
    | '/$organization'
    | '/$organization/files'
    | '/$organization/meta-schemas'
    | '/$organization/organizations'
    | '/$organization/posts'
    | '/$organization/reaction-packs'
    | '/$organization/tags'
    | '/$organization/taxonomies'
    | '/$organization/users'
  id:
    | '__root__'
    | '/'
    | '/$organization'
    | '/sign-in'
    | '/welcome'
    | '/$organization/'
    | '/$organization/files/'
    | '/$organization/meta-schemas/'
    | '/$organization/organizations/'
    | '/$organization/posts/'
    | '/$organization/reaction-packs/'
    | '/$organization/tags/'
    | '/$organization/taxonomies/'
    | '/$organization/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrganizationRoute: typeof OrganizationRouteWithChildren
  SignInRoute: typeof SignInRoute
  WelcomeRoute: typeof WelcomeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrganizationRoute: OrganizationRouteWithChildren,
  SignInRoute: SignInRoute,
  WelcomeRoute: WelcomeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$organization",
        "/sign-in",
        "/welcome"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$organization": {
      "filePath": "$organization.tsx",
      "children": [
        "/$organization/",
        "/$organization/files/",
        "/$organization/meta-schemas/",
        "/$organization/organizations/",
        "/$organization/posts/",
        "/$organization/reaction-packs/",
        "/$organization/tags/",
        "/$organization/taxonomies/",
        "/$organization/users/"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/welcome": {
      "filePath": "welcome.tsx"
    },
    "/$organization/": {
      "filePath": "$organization/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/files/": {
      "filePath": "$organization/files/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/meta-schemas/": {
      "filePath": "$organization/meta-schemas/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/organizations/": {
      "filePath": "$organization/organizations/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/posts/": {
      "filePath": "$organization/posts/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/reaction-packs/": {
      "filePath": "$organization/reaction-packs/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/tags/": {
      "filePath": "$organization/tags/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/taxonomies/": {
      "filePath": "$organization/taxonomies/index.tsx",
      "parent": "/$organization"
    },
    "/$organization/users/": {
      "filePath": "$organization/users/index.tsx",
      "parent": "/$organization"
    }
  }
}
ROUTE_MANIFEST_END */
